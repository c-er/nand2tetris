// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // A register
    ARegister(in=inA, load=loadA, out=outA);

    // D register
    DRegister(in=inD, load=loadD, out=outD);

    // PC register
    PC(in=inPC, load=loadPC, inc=incPC, reset=resetPC, out[0..14]=pc);

    // ALU
    // input to ALU is decided by a in C-instruction
    Mux16(a=outA, b=inM, sel=instruction[12], out=inALU);

    ALU(x=outD, y=inALU, zx=instruction[11], nx=instruction[10], zy=instruction[9],
      ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, zr=zr, ng=ng);

    // if dest specifies D and it's a C-instruction, write outALU to D and load
    And16(a=outALU, b=outALU, out=inD);
    And(a=instruction[15], b=instruction[4], out=loadD);

    // if it's a C instruction: write outALU to A iff dest specifies A
    // else: write instruction to A
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=inA);
    Not(in=instruction[15], out=isAin);
    Or(a=isAin, b=instruction[5], out=loadA);

    // if it's a C instruction: write outALU to M iff dest specifies M
    And16(a=outALU, b=outALU, out=outM);
    And(a=instruction[15], b=instruction[3], out=writeM);

    // address to write to is always specified by A
    And16(a=outA, b=outA, out[0..14]=addressM);

    // jmp calculation
    // first compute some nice flags
    Or(a=zr, b=ng, out=nonpos);
    Not(in=nonpos, out=pos);

    And(a=instruction[2], b=ng, out=jn);
    And(a=instruction[1], b=zr, out=jz);
    And(a=instruction[0], b=pos, out=jp);

    Or(a=jn, b=jz, out=tmp1);
    Or(a=tmp1, b=jp, out=jmp1);
    And(a=jmp1, b=instruction[15], out=jmp);

    // if jmp set, load A into PC
    And16(a=outA, b=outA, out=inPC);
    And(a=jmp, b=jmp, out=loadPC);

    // if reset set, reset PC
    And(a=reset, b=reset, out=resetPC);

    // if neither set, inc PC
    Or(a=jmp, b=reset, out=tmp2);
    Not(in=tmp2, out=incPC);
}
